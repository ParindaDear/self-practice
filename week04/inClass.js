// filter 
const w = ["spray", "elite", "exuberant", "destruction", "present"];
const result = w.filter((wo) => wo.length > 6);
console.log(result); // ["exuberant", "destruction", "present"]

//reverse
const words = ["apple", "Mango", "orange", "Banana"]
//words.reverse()
//console.log(words)

// üíå ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô callback function
// ‡∏õ‡∏• word ‡πÄ‡∏õ‡πá‡∏ô parameter   word ‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏µ‡πà‡∏≠‡∏±‡∏ô‡∏Å‡πá‡πÄ‡πÄ‡∏•‡πâ‡∏ß‡πÄ‡πÄ‡∏ï‡πà‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡∏µ‡πà‡∏≠‡∏±‡∏ô

//‡∏ß‡∏¥‡∏ò‡∏µ 1. annonymous function declaration (‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏¥‡πâ‡∏á)
const startAWords1 = words.filter(function (word) {
    return word.startsWith("a")
})
console.log(startAWords1); //[ 'apple' ]

// ‡∏ß‡∏¥‡∏ò‡∏µ 2. annonymous arrow function  (‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏¥‡πâ‡∏á)
// const startAWords = words.filter( word => word.startsWith('a') ) //‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô annonymous function ‡πÅ‡∏ö‡∏ö arrow func
// ‡∏õ‡∏•. ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô const startAWords ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏°‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏°‡∏±‡∏ô‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏õ‡∏£ / ‡∏Ñ‡∏£‡∏≠‡∏ö console.log ‡πÑ‡∏õ‡πÄ‡∏•‡∏¢ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ filter ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô original array
// console.log(startAWords); //[ 'apple' ]

//‡∏ß‡∏¥‡∏ò‡∏µ 3. named function declaration (‡πÄ‡πÄ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏°‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å)
function checkStartA2(word) {
    return word.startsWith("a")
}
const startAWords3 = words.filter(checkStartA2)
console.log(startAWords3) //[ 'apple' ]

//‡∏ß‡∏¥‡∏ò‡∏µ 4. named arrow function  (‡πÄ‡πÄ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏°‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å)
const checkStartA = (word) => word.startsWith("a")
const startAWords2 = words.filter(checkStartA)
console.log(startAWords2) //[ 'apple' ]




// üíå forEach()
// ‡∏à‡∏≤‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô callback function ‡∏ß‡∏¥‡∏ò‡∏µ 2. annonymous arrow function 
// ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÄ‡πÄ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡πÉ‡∏ä‡πâ forEach
const startAWords = []; //‡πÄ‡∏û‡∏£‡∏≤‡∏∞ forEach ‡∏°‡∏±‡∏ô‡πÑ‡∏°‡πà return ‡πÄ‡∏•‡∏¢‡πÄ‡∏•‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ
words.forEach(word => {
    if(word.startsWith('a')) {
        startAWords.push(word); //‡πÄ‡πÄ‡∏•‡πâ‡∏ß‡∏Å‡πá push ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
    }
});
console.log(startAWords); //[ 'apple' ]

// üíå map()
//‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏Ñ‡∏∑‡∏≠‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÉ‡∏´‡πâ object ‡∏ô‡∏µ‡πâ‡∏°‡∏≤ ‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ array ‡∏Ç‡∏≠‡∏á fullname ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô uppercase ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ map ‡πÅ‡∏•‡πâ‡∏ß‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏ô‡∏µ‡πâ [ 'SOMCHAI JAIDEE', 'PORNCHAI DEEJAI', 'SUDA RAKDEE' ]
const employees = [
  {
    id: "e1001",
    firstname: "Somchai",
    lastname: "Jaidee",
  },
  {
    id: "e1002",
    firstname: "Pornchai",
    lastname: "Deejai",
  },
  {
    id: "e1005",
    firstname: "Suda",
    lastname: "Rakdee",
  },
]
 
const fullname = employees.map((employee) => (employee.firstname + " " + employee.lastname).toUpperCase())
                                            //‡∏´‡∏£‡∏∑‡∏≠ (employee.firstname.toUpperCase()+' '+employee.lastname.toUpperCase())
console.log(fullname)

//‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á fullname ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ jai
const fullnameJai = fullname.filter(name => name.toLowerCase().includes("jai"))
console.log(fullnameJai) 


/* ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏Å‡πá‡πÑ‡∏î‡πâ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å fullname ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
const fullnameWithJai = employees
  .map(emp => `${emp.firstname} ${emp.lastname}`.toUpperCase())
  .filter(name => name.toLowerCase().includes("jai"));
console.log(fullnameWithJai); */


//‡∏à‡∏á‡∏´‡∏≤ net price ‡πÉ‡∏ä‡πâ reduce
//net price = total price * VAT 7%
const carts = [
  { productId: 1002, price: 10, amount: 5 },
  { productId: 2005, price: 100, amount: 2 },
  { productId: 5001, price: 5, amount: 4 },
]
const netPrice = carts.reduce(
    (total, product) => total +  (product.price * product.amount) * 1.07 ,0) //0‡∏Ñ‡∏∑‡∏≠ initial value ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡πÄ‡∏û‡∏ô‡∏≤‡∏∞‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏Ç‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡∏°‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏≠‡∏≤‡πÄ‡∏•‡∏Ç‡πÑ‡∏´‡∏ô‡∏°‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡∏ú‡∏•‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô NaN
console.log(netPrice)

/* ‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÄ‡∏â‡∏•‡∏¢‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ
const totalPrice = carts.reduce(
  (total, product) => total + product.price * product.amount,
  0
)
const netPrice = totalPrice * 1.07
console.log(netPrice.toFixed(2))
 */

// üíå
const nums = [2, 4, 6]
// nums[nums.length] = 8
console.log(nums.push(8)) //append in the end of array, return new length
console.log(nums)
nums.unshift(10) //add in the beginning of array
console.log(nums)
nums.pop() //remove in the end of array
console.log(nums)
nums.shift() //remove in the beginning of array
console.log(nums)

//üíå splice()
const wordsfr = ["apple", "orange", "banana"]

// ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£ add
//(‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á index ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° add, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô item ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡∏•‡∏ö‡πÄ‡πÄ‡∏ï‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ add ‡∏à‡∏∞‡πÉ‡∏™‡πà‡πÄ‡∏õ‡πá‡∏ô 0, ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞ add ‡πÉ‡∏™‡πà‡πÑ‡∏õ....)
wordsfr.splice(2, 0, "cherry", "berry")
console.log(wordsfr) //[ 'apple', 'orange', 'cherry', 'berry', 'banana' ]

//‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£ delete
//(‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á index ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° delete, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô item ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡∏•‡∏ö, ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞ delete ....)
wordsfr.splice(2, 1)
console.log(wordsfr) //[ 'apple', 'orange', 'berry', 'banana' ]

//‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏≤‡∏£ replace
//(‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á index ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° replace, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô item ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡∏•‡∏ö, ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞ replace ‡πÉ‡∏™‡πà‡πÑ‡∏õ ....)
wordsfr.splice(2, 1, "mango")
console.log(wordsfr) //[ 'apple', 'orange', 'mango', 'banana' ]

//üíå slice
const words1 = ["apple", "orange", "banana", "mango", "cherry"]

console.log(words1.slice(1)) // ["orange", "banana", "mango", "cherry"]   ‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏≠‡∏≤‡∏à‡∏ô‡∏à‡∏ö‡πÄ‡∏•‡∏¢
console.log(words1.slice(0, 3)) //["apple", "orange", "banana"]
console.log(words1.slice(2, 5)) // ["banana", "mango", "cherry"]
console.log(words1.slice(2)) // ["banana", "mango", "cherry"]
console.log(words1.slice(-3)) // ["banana", "mango", "cherry"]



 
