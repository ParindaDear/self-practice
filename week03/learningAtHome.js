// üíå ‡∏™‡πà‡∏á Function ‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô Parameter 
function superNatural(name, powerFunc){
    return powerFunc(name);
}

function vampire(vName){
    return  "I'm " + vName + ", a vampire from Cullen Family.";  
}

function werewolf(wName){
    return "I'm " + wName + ", a werewolf from Blackwood";
}

console.log(superNatural("Bella", vampire)) //I'm Bella, a vampire from Cullen Family.
console.log(superNatural("Jacob", werewolf)) //I'm Jacob, a werewolf from Blackwood
console.log("==============================================")



// üíå func ‡∏ã‡πâ‡∏≠‡∏ô func (Nested Function + Closure)
function encounterVampire() {
    let count = 0;

    function meet() {
        count++;
        return `It's the ${count} times that she has met a vampire.`;
    }
    return meet;
}

const bellaEncounters = encounterVampire();

console.log(bellaEncounters());  //It's the 1 times that she has met a vampire.
console.log(bellaEncounters());  //It's the 2 times that she has met a vampire.
console.log(bellaEncounters());  //It's the 3 times that she has met a vampire.
console.log("==============================================")

/*
encounterVampire() = outer function
meet() = inner function
bellaEncounters = closure ‡∏ó‡∏µ‡πà ‡∏à‡∏î‡∏à‡∏≥‡∏Ñ‡πà‡∏≤ count ‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤ encounterVampire() ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
*/

// üíå Primitive Parameters: Passed by Value
//Primitive Types ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà: number, string, boolean, null, undefined, symbol, bigint
//‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á primitive ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ‚Üí ‡∏Ñ‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å (pass by value)
function jumpSquare(n){
    n = n + 1;  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô func
    return n * n;
}

let testMe = 2 ; 
console.log(jumpSquare(testMe)); //9
console.log(testMe) //2 //‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
console.log("==============================================")

// üíå Object Parameters: Passed by Reference
//Object types ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà: Object, Array, Function
//‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á object ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ‚Üí ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏∞‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á object ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
//‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô properties ‡∏Ç‡∏≠‡∏á object ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ‚Üí ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢
function rename(person) {
    person.name = "Edward";
}

const bella = {name : "Bella"};

console.log(bella.name); //Bella
rename(bella);  // ‡∏™‡πà‡∏á object ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
console.log(bella.name); //Edward
console.log("==============================================")

// üíå ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á arguments object
// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡πÄ‡∏ö‡∏ö function ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÉ‡∏ä‡πâ arguements
function introduceVampires() {
    console.log("Amount of Vampire: ", arguments.length); //‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ arguements ‡∏Å‡πá‡πÑ‡∏î‡πâ ‡∏°‡∏±‡∏ô‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏•‡πà‡∏≤‡∏á
    for (let i = 0; i < arguments.length; i++){
        console.log("Vampire: ", arguments[i]);
    }
}

introduceVampires("Cullen", "Alice", "Rose");

// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö Arrow Function 
const listOfVampire = (...args) => {
    console.log("List of Vampire: ", args.length);

    for (let i = 0; i < args.length; i++){
        console.log("Vampire: ", args[i])
    }
};
listOfVampire("Cullen", "Alice", "Rose")
console.log("==============================================")

// üíå func ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢ parameter ‡πÄ‡πÄ‡∏•‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏£‡∏î default ‡πÉ‡∏´‡πâ parameter ‡∏î‡πâ‡∏ß‡∏¢
function greet(name = 'Guest', age = 20){
    return "Hello, " + name + ", Age " + age ; 
}

console.log(greet()) //Hello, Guest, Age 20
console.log(greet('James')) //Hello, James, Age 20
console.log(greet('James', 35)) //Hello, James, Age 35

// üíå Rest Parameters
// 1. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ä‡πâ Rest Parameters
function vampirePower(...args){
    for (const i of args) {
        console.log(i.name + " has power: " + i.power);
    }
}
const edward = { name: "Edward", power: "Mind Reading" };
const alice = { name: "Alice", power: "Future Vision" };
const jasper = { name: "Jasper", power: "Emotion control" };
vampirePower(edward, alice, jasper);
console.log("==============================================")

// 2. ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö Array Methods
function calculateTotalPower(...args){
    return args.reduce((total,i) => total + i.power, 0);
}
const edward1 = { name: "Edward", power: 90 };
const alice1 = { name: "Alice", power: 80 };
const jasper1 = { name: "Jasper", power: 70 };
console.log(calculateTotalPower(edward1, alice1, jasper1))
console.log("==============================================")

// üíå Spread Operator
// 1.‡πÉ‡∏ä‡πâ‡πÄ‡∏ö‡∏ö‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
function sum(n1, n2, n3) {
    return n1 + n2 + n3;
}
let nums = [5, 20, 15];
console.log(sum(...nums));
//‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠ ...nums ‚Üí ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô 5, 20, 15 ‚Üí ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö parameter n1, n2, n3

// 2.‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö array 
let arr1 = [1, 2];
let arr2 = [3, 4];

let merge = [...arr1, ...arr2]; // ‡∏£‡∏ß‡∏° array ‡∏î‡πâ‡∏ß‡∏¢ spread
console.log(merge); //‡∏Ç‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å‡∏™‡∏≠‡∏ö ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏ü‡∏µ‡πâ‡∏¢‡∏ß‡πÜ*****************************************************

// (‡∏≠‡∏∑‡πà‡∏ô‡πÜ) 3. ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö function arguments
function multiply(x, y, z) {
  return x * y * z;
}
let numbers = [2, 3, 4];
console.log(multiply(...numbers)); 
console.log("==============================================")



// üíå Destructuring Parameters
// 1. Destructuring Array
// ‡πÅ‡∏¢‡∏Å element ‡πÅ‡∏£‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞ array
function sumFirstPower([p1], [p2]) {
  return p1 + p2;
}
const edwardPowers = [10, 20];
const alicePowers = [5, 15];
console.log(sumFirstPower(edwardPowers, alicePowers)); 
    // Output: 15 ‚Üí 10 + 5
    // [p1] ‚Üí ‡πÄ‡∏≠‡∏≤ element ‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á array ‡πÅ‡∏£‡∏Å (Edward)
    // [p2] ‚Üí ‡πÄ‡∏≠‡∏≤ element ‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á array ‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á (Alice)

// 2. Destructuring Array ‡∏´‡∏•‡∏≤‡∏¢ element
function totalPower([e1, e2], [a1, a2]) {
  return e1 + e2 + a1 + a2;
}
console.log(totalPower([10, 20], [5, 15])); 
    // Output: 50 ‚Üí 10+20+5+15
    // [e1, e2] ‚Üí ‡πÅ‡∏¢‡∏Å power ‡∏Ç‡∏≠‡∏á Edward
    // [a1, a2] ‚Üí ‡πÅ‡∏¢‡∏Å power ‡∏Ç‡∏≠‡∏á Alice

// 3. ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô array ‡∏´‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏° element
function arrayAdd3([x1, y1], [x2, y2]) {
  return [x1 + x2, y1 + y2];
}

const x = [1, 2];
const y = [3, 4];
console.log(arrayAdd3(x, y)); // [4, 6]

// (GPT ‡πÅ‡∏ñ‡∏°) 4. Destructuring Object
// ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÄ‡∏£‡∏≤‡πÄ‡∏Å‡πá‡∏ö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ ‡πÄ‡∏õ‡πá‡∏ô object
function showVampire({name, power}) {
  return `${name} has power ${power}`;
}
const edward2 = { name: "Edward", power: "Mind Reading" };
console.log(showVampire(edward2));
    // Output: Edward has power Mind Reading
    // {name, power} ‚Üí ‡πÅ‡∏¢‡∏Å property ‡∏Ç‡∏≠‡∏á object ‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ edward.name ‡∏´‡∏£‡∏∑‡∏≠ edward.power

// (GPT ‡πÅ‡∏ñ‡∏°) 5. Destructuring Object + Array
function combineVampireInfo({name, power}, [p1, p2]) {
  return `${name} has power ${power}, and the amount of power is ${p1 + p2}`;
}
console.log(combineVampireInfo(edward2, [10, 5]));
// Output: Edward has power Mind Reading, and the amount of power is 15
console.log("==============================================")



// üíå Object Destructuring Parameters
// 1.‡πÅ‡∏¢‡∏Å property ‡∏á‡πà‡∏≤‡∏¢ ‡πÜ
const students = {
    studentId: 64001,
    displayName:  'lnwza007',
    fullName: {
        firstName: 'Sompong',
        lastName: 'Uhauha'
    }
};

function studentId({ studentId })  {
    return studentId;
}
console.log(studentId(students))
// { studentId } ‚Üí ‡πÅ‡∏¢‡∏Å property studentId ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ studentId
// ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô students.studentId

// 2. ‡πÅ‡∏¢‡∏Å‡∏´‡∏•‡∏≤‡∏¢ property ‡∏û‡∏£‡πâ‡∏≠‡∏° nested object
function getFullName({ fullName: { firstName, lastName } }) {
  return firstName + " " + lastName ;
}
console.log(getFullName(students)); 
console.log("==============================================")
// fullName: { firstName, lastName } ‚Üí unpack nested object
// ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á nested properties ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á


// üíå Nested Object Destructuring
const students1 = {
  studentId: 64001,
  displayName: 'jsGuy',
  fullName: {
    firstName: 'Somchai',
    lastName: 'DeeJai'
  }
};

function getFirstName({ displayName, fullName: { firstName } }) {
  return `${displayName} is ${firstName}`;
}
console.log(getFirstName(students1)); 
// { displayName, fullName: { firstName } } ‚Üí unpack property displayName ‡πÅ‡∏•‡∏∞ nested property fullName.firstName
// ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô students.displayName ‡∏´‡∏£‡∏∑‡∏≠ students.fullName.firstName
console.log("==============================================")


// üíå Combined Array & Object Destructuring
const person = [
  { id: 1, name: 'Suda' },
  { id: 2, name: 'Surapong' },
  { id: 3, name: 'Somchai' }
];

function getPersonName([, { name }]) {
    return name;
}
console.log(getPersonName(person))